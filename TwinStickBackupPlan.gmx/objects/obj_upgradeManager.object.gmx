<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalization
m_cards[0] = 0;
m_cardDistances[0] = 0;
m_currentSelected = 0;

key_left = noone;
key_right = noone;
key_accept = noone;
key_back = noone;

m_inputTimer = 0;

m_descY = 0;
m_descAlpha = 0;

for (i = 0; i &lt; 4; i++)
{
    var c = instance_create(x, y, obj_upgradeCard);
    c.m_id = i;
    m_cards[i] = c;
    m_cardDistances[i] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get input
key_accept = gamepad_button_check_pressed(0, gp_face1);
key_back = gamepad_button_check_pressed(0, gp_face2);

var hAxis = gamepad_axis_value(0, gp_axislh);

if (hAxis &gt; 0.4 &amp;&amp; m_inputTimer == 0)
{ key_right = true; m_inputTimer = 10; }
else { key_right = false; }

if (hAxis &lt; -0.4 &amp;&amp; m_inputTimer == 0)
{ key_left = true; m_inputTimer = 10; }
else { key_left = false; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time timers

if (m_inputTimer &gt; 0)
{
    m_inputTimer--;
}

m_descY = lerp(m_descY, 0, 0.4);
m_descAlpha = lerp(m_descAlpha, 1, 0.4);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select stuff

var sound = choose(snd_card1, snd_card2, snd_card3, snd_card4, snd_card5);

if (key_left)
{
    m_currentSelected++;
    audio_play_sound(sound, 1, 0);
    
    m_descY = 32;
    m_descAlpha = 0;
}
if (key_right)
{
    m_currentSelected--;
    audio_play_sound(sound, 1, 0);
    
    m_descY = 32;
    m_descAlpha = 0;
}
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make sure that the value doesn't go out of bounds

if (m_currentSelected &lt; 0)
{
    m_currentSelected = 3;
}
if (m_currentSelected &gt; 3)
{
    m_currentSelected = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do stuff when selected a card ye

if(key_accept)
{
    switch(m_currentSelected)
    {
        case 0:
            global.upgradeFireRate++;
            break;
        
        case 1:
            global.upgradeBulletDamage++;
            break;
        
        case 2:
            global.upgradeHealth++;
            break;
            
        case 3:
            global.upgradeDrone++;
            break;
    }
    
    room_goto(rm_level);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Positioning

// Create origin positions
var xOr = global.gameWidth / 3.5;
var yOr = global.gameHeight * 1.2;
var distance = 384;

for (i = 0; i &lt; 4; i++)
{
    m_cardDistances[i] = lerp(m_cardDistances[i], (m_currentSelected == i) * 96 + 384, 0.3);
    var angle = (i * 20 - 30);
    
    var xp = xOr + lengthdir_x(m_cardDistances[i], angle + 90);
    var yp = yOr + lengthdir_y(m_cardDistances[i], angle + 90);
    
    m_cards[i].m_angle = angle
    m_cards[i].x = xp;
    m_cards[i].y = yp;
}

obj_circleBackground.xpos = xOr + lengthdir_x(384, 90);
obj_circleBackground.ypos = yOr + lengthdir_y(384, 90);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw title

draw_set_color(c_black);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_combo);

var angle = sin(current_time / 500) * 15;

var time = audio_sound_get_track_position(global.bgm);
var currentPos = time * (global.bgmBPM / 60);
var multiplier = 0.5;
var scale = abs(sin(degtorad(currentPos) * multiplier * 360)) * 0.5 + 0.5;

draw_text_transformed(global.gameWidth/3.5, global.gameHeight/10, "Select Upgrade!!", scale, scale, angle);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw description

var info = upgrade_info(m_currentSelected);
var text = info[1];

draw_set_font(fnt_medium);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_color(c_black);
draw_set_alpha(m_descAlpha);

draw_text_ext(global.gameWidth/2, global.gameHeight/3 + m_descY, text, -1, global.gameWidth * .7);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
