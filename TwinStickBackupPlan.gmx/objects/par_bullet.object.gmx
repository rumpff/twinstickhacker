<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move the bullet

image_angle = m_angle;
motion_set(m_angle, to_deltatime(m_speed));

if (scr_gridPlaceMeeting(x, y)) 
{
    instance_destroy(); 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for collisions with enemys

var xof, yof;

var collision = collision_line(x, y , xprevious, yprevious, par_enemy, true, false);

if(collision == noone) 
{ 
    // Nothing collided with the center, check the left side
    xof = lengthdir_x(sprite_height/2, m_angle+90);
    yof = lengthdir_y(sprite_height/2, m_angle+90);
    
    collision = collision_line(x + xof, y + yof, xprevious + xof, yprevious + yof, par_enemy, true, false);
}

if(collision == noone) 
{ 
    // Nothing collided with the left either, check the right side
    xof = lengthdir_x(sprite_height/2, m_angle-90);
    yof = lengthdir_y(sprite_height/2, m_angle-90);
    
    collision = collision_line(x + xof, y + yof, xprevious + xof, yprevious + yof, par_enemy, true, false);
}

if(collision != noone)
{
    // Collide with the enemy
    var dealtDamage = min(collision.hp, m_damage); // Deal less damage if the enemy has less health than the bullet
    
    collision.hp -= dealtDamage;
    audio_play_sound(snd_enemyHit, 1, 0);
    m_bulletDamage -= dealtDamage;
    
    with(collision) { event_user(1); }
    
    // Check if the bullet needs to be destroyed
    if(m_bulletDamage &lt;= 0)
    {
        instance_destroy();
    }
    
    // Set the bullet against the enemy
    var enemyWidth = collision.sprite_width;
    var xorignOff = sprite_get_xoffset(sprite_index);
    
    xof = lengthdir_x(enemyWidth/2 - xorignOff, m_angle+180);
    yof = lengthdir_y(enemyWidth/2 - xorignOff, m_angle+180); 
    
    x = collision.x + xof;
    y = collision.y + yof;  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
