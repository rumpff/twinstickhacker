<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize variables

enum GridSpace { empty, ground, wall };
m_Grid = 0;

m_GridWidth = 256;
m_GridHeight = 256;
m_GridSize = 32;

m_Walkers = 0;

m_ChanceWalkerChangeDir = 0.5;
m_ChanceWalkerSpawn = 0.05;
m_ChanceWalkerDestroy = 0.05;
m_MaxWalkers = 10;

room_width = m_GridWidth * m_GridSize;
room_height = m_GridHeight * m_GridSize;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Generate Level</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup

// Create the grid
m_Grid = ds_grid_create(m_GridWidth, m_GridHeight);

for (_x = 0; _x &lt; m_GridWidth - 1; _x++)
{
    for (_y = 0; _y &lt; m_GridHeight - 1; _y++)
    {
        ds_grid_set(m_Grid, _x, _y, GridSpace.empty);
    }
}


// Create first walker
m_Walkers = ds_list_create();

var w = instance_create(m_GridWidth / 2, m_GridHeight / 2, obj_LevelGenWalker);
w.m_Dir = choose(0, 90, 180, 270);

ds_list_add(m_Walkers, w);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create floors
var _groundPercentage = random(0.1) + 0.15;

for(_iterations = 0; _iterations &lt; 25; _iterations++)
{
    // Create floors
    for(i = 0; i &lt; ds_list_size(m_Walkers) - 1; i++)
    {
        var w = ds_list_find_value(m_Walkers, i);
        ds_grid_set(m_Grid, w.x, w.y, GridSpace.ground);
    }

    // Walker Chance - Destroy walkers
    var numberChecks = ds_list_size(m_Walkers);
    for(i = 0; i &lt; numberChecks - 1; i++)
    {
        if(random(1) &lt; m_ChanceWalkerDestroy &amp;&amp; ds_list_size(m_Walkers) &gt; 1)
        {
            var w = ds_list_find_value(m_Walkers, i);
            ds_list_delete(m_Walkers, i);
            
            instance_destroy(w);
            break;
        }
    }
    
    // Walker Chance - pick new direction
    for(i = 0; i &lt; ds_list_size(m_Walkers) - 1; i++)
    {
        if(random(1) &lt; m_ChanceWalkerChangeDir)
        {
            var w = ds_list_find_value(m_Walkers, i);
            w.m_Dir = choose(0, 90, 180, 270);
        }
    }
    
    // Walker Chance - spawn new walker
    var numberChecks = ds_list_size(m_Walkers);
    for(i = 0; i &lt; numberChecks - 1; i++)
    {
        if(random(1) &lt; m_ChanceWalkerSpawn &amp;&amp; ds_list_size(m_Walkers) &lt; m_MaxWalkers)
        {
            var w = ds_list_find_value(m_Walkers, i);
            
            var wNew = instance_create(w.x, w.y, obj_LevelGenWalker);
            wNew.m_Dir = choose(0, 90, 180, 270);
            
            ds_list_add(m_Walkers, wNew);
        }
    }
    
    // Move walkers
    for(i = 0; i &lt; ds_list_size(m_Walkers) - 1; i++)
    {
        var w = ds_list_find_value(m_Walkers, i);
        
        w.x += lengthdir_x(1, w.m_Dir);
        w.y += lengthdir_y(1, w.m_Dir);
    }
    
    // Clamp walkers within grid
    for(i = 0; i &lt; ds_list_size(m_Walkers) - 1; i++)
    {
        var w = ds_list_find_value(m_Walkers, i);
        
        w.x = clamp(w.x, 1, m_GridSize - 1);
        w.y = clamp(w.y, 1, m_GridSize - 1);
    }

    // Check for ground percentage and exit if enough
    var groundAmount = 0
    for (_x = 0; _x &lt; m_GridWidth - 1; _x++)
    {
        for (_y = 0; _y &lt; m_GridHeight - 1; _y++)
        {
            if(ds_grid_get(m_Grid, _x, _y) == GridSpace.ground)
                groundAmount++;
        }
    }
    
    var gridSize = ds_grid_width(m_Grid) * ds_grid_height(m_Grid);
    
    if(groundAmount / gridSize &gt; _groundPercentage)
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create walls
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove single walls
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn level
for (_x = 0; _x &lt; m_GridWidth - 1; _x++)
{
    for (_y = 0; _y &lt; m_GridHeight - 1; _y++)
    {
        var spawnObj = -1;
    
        switch(ds_grid_get(m_Grid, _x, _y))
        {   
            case GridSpace.ground:
                spawnObj = obj_groundTest;
                break;
                
            case GridSpace.wall:
                spawnObj = obj_wallTest;
                break;
        }
        
        if(spawnObj != -1)
            instance_create(_x * m_GridSize, _y * m_GridSize, spawnObj)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleaning
ds_list_destroy(m_Walkers);
ds_grid_destroy(m_Grid);

audio_play_sound(snd_enemyHit, 1, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
