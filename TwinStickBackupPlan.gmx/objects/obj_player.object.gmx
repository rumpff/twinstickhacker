<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerHead1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>par_trippy</parentName>
  <maskName>spr_player_hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable Initalization

m_gpId = 0;

m_moveSpeed = 0;
m_moveDirection = 0;

m_fireDecrease = 1;

m_aimDirection = 0;

angle_prev = 0;
angle_next = 0;
angle_diff = 0;

m_shootCooldown = 0;
m_abilityCooldown = 0;
m_abilityAcitve = false;

m_hStickL = 0;
m_vStickL = 0;

m_hStickLMovement = 0;
m_vStickLMovement = 0;

m_hStickR = 0;
m_vStickR = 0;

m_triggerRight = 0;
m_triggerLeft = 0;

m_shoulderRight = 0;
m_shoulderLeft = 0;

m_buttonA = 0;
m_buttonB = 0;
m_buttonX = 0;
m_buttonY = 0;

m_buttonAPressed = 0;
m_buttonBPressed = 0;
m_buttonXPressed = 0;
m_buttonYPressed = 0;

m_maxSpeed = 12;

m_headSprite = noone;

m_weaponSprite[0] = noone;
m_glowSprite[0] = noone;

m_imageShootTimer = 0;
m_imageShootMax = 0;

m_weaponState = 0;

m_glowCollor = noone;

m_oldPosX = 0;
m_oldPosY = 0;

m_trailPosX = 0;
m_trailPosY = 0;

m_trailOffsetX = 0;
m_trailOffsetY = 0;

m_dashMultiplier = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Recieve modifications

m_playerHead = global.playerHead;
m_playerWeapon = global.playerWeapon
m_glowColor = global.playerColor
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get the sprites
switch (m_playerHead)
{
    case head_1:
        m_headSprite = spr_playerHead1;
        break;
    case head_2:
        m_headSprite = spr_playerHead2;
        break;
    case head_3:
        m_headSprite = spr_playerHead3;
        break;
    case head_4:
        m_headSprite = spr_playerHead4;
        break;
    case head_5:
        m_headSprite = spr_playerHead5;
        break;
    case head_6:
        m_headSprite = spr_playerHead6;
        break;
    case head_7:
        m_headSprite = spr_playerHead7;
        break;
    case head_8:
        m_headSprite = spr_playerHead8;
        break;
    case head_9:
        m_headSprite = spr_playerHead9;
        break;
    case head_10:
        m_headSprite = spr_playerHead10;
        break;
}

switch (m_playerWeapon)
{
    case weapon_1: 
        m_weaponSprite[0] = spr_playerGun1Base;
        m_weaponSprite[1] = spr_playerGun1Shoot;
        
        m_glowSprite[0] = spr_Glow1Base;
        m_glowSprite[1] = spr_Glow1Shoot;
        break;
        
    case weapon_2: 
        m_weaponSprite[0] = spr_playerGun2Base;
        m_weaponSprite[1] = spr_playerGun2Shoot;
        break;
        
    case weapon_3: 
        m_weaponSprite[0] = spr_playerGun3Base;
        m_weaponSprite[1] = spr_playerGun3Shoot;
        break;
        
    case weapon_4: 
        m_weaponSprite[0] = spr_playerGun4Base;
        m_weaponSprite[1] = spr_playerGun4Shoot;
        break;
        
    case weapon_5: 
        m_weaponSprite[0] = spr_playerGun5Base;
        m_weaponSprite[1] = spr_playerGun5Shoot;
        break;
        
    case weapon_6: 
        m_weaponSprite[0] = spr_playerGun6Base;
        m_weaponSprite[1] = spr_playerGun6Shoot;
        break;
        
    case weapon_7: 
        m_weaponSprite[0] = spr_playerGun7Base;
        m_weaponSprite[1] = spr_playerGun7Shoot;
        break;
        
    case weapon_8: 
        m_weaponSprite[0] = spr_playerGun8Base;
        m_weaponSprite[1] = spr_playerGun8Shoot;
        break;
        
    case weapon_9: 
        m_weaponSprite[0] = spr_playerGun9Base;
        m_weaponSprite[1] = spr_playerGun9Shoot;
        break;
        
    case weapon_10: 
        m_weaponSprite[0] = spr_playerGun10Base;
        m_weaponSprite[1] = spr_playerGun10Shoot;
        break;
}

// Get animation length        
m_imageShootMax = sprite_get_number(m_weaponSprite[1]);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gamepad Setup
gamepad_set_axis_deadzone(m_gpId, 0.3);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize trail
trail_init();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0; i&lt;90; i+=1)
{
    instance_create(x, y, obj_playerParticle);
};

scr_screenshake(42, 21);
audio_play_sound(snd_playerDie, 1, 0);
sleep(35);
trail_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Obtain trail offset
switch (m_playerHead)
{
    case head_3:
        m_trailOffsetX = -10;
        break;
    case head_4:
        m_trailOffsetX = 2;
        break;
    case head_6:
        m_trailOffsetX = 4;
        break;
    case head_7:
        m_trailOffsetX = -9;
        break;
    case head_8:
        m_trailOffsetX = 11;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate trail

m_trailPosX = m_oldPosX + lengthdir_x(m_trailOffsetX, m_aimDirection);
m_trailPosY = m_oldPosY + lengthdir_y(m_trailOffsetX, m_aimDirection);

trail_calculate_ext(20, m_trailPosX, m_trailPosY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set old pos
m_oldPosX = x;
m_oldPosY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Obtain input

// Left stick
m_hStickL = gamepad_axis_value(m_gpId, gp_axislh);
m_vStickL = gamepad_axis_value(m_gpId, gp_axislv);

// Right stick
m_hStickR = gamepad_axis_value(m_gpId, gp_axisrh);
m_vStickR = gamepad_axis_value(m_gpId, gp_axisrv);

// Triggers
m_triggerRight = gamepad_button_value(m_gpId, gp_shoulderrb)
m_triggerLeft = gamepad_button_value(m_gpId, gp_shoulderlb)

// Shoulders
m_shoulderRight = gamepad_button_check(m_gpId, gp_shoulderr);
m_shoulderLeft = gamepad_button_check(m_gpId, gp_shoulderl);

// Butttons
m_buttonA = gamepad_button_check(m_gpId, gp_face1);
m_buttonB = gamepad_button_check(m_gpId, gp_face2);
m_buttonX = gamepad_button_check(m_gpId, gp_face3);
m_buttonY = gamepad_button_check(m_gpId, gp_face4);

m_buttonAPressed = gamepad_button_check_pressed(m_gpId, gp_face1);
m_buttonBPressed = gamepad_button_check_pressed(m_gpId, gp_face2);
m_buttonXPressed = gamepad_button_check_pressed(m_gpId, gp_face3);
m_buttonYPressed = gamepad_button_check_pressed(m_gpId, gp_face4);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate directions and movement lerp

// Directions
if (m_hStickR != 0 || m_vStickR != 0)
{
    m_moveSpeed = point_distance(x, y, x + m_hStickL * m_maxSpeed, y + m_vStickL * m_maxSpeed);
    m_moveDirection = point_direction(x, y, x + m_hStickL, y + m_vStickL);
}

 
// Calcutate angle
if (m_hStickR != 0 || m_vStickR != 0) 
{ angle_next = point_direction(x, y, x + m_hStickR, y + m_vStickR); } // The angle with "made" with the stick
angle_prev = m_aimDirection; // the last angle of the image
angle_diff = angle_difference(angle_prev,angle_next); // get the difference between the angle

angle_next = angle_prev-angle_diff; // convert the angle to a number outside of 0-360 if needed

m_aimDirection = lerp(m_aimDirection, angle_next, 0.4);

// Movement lerp
m_hStickLMovement = lerp(m_hStickLMovement, m_hStickL, 0.2);
m_vStickLMovement = lerp(m_vStickLMovement, m_vStickL, 0.2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate next position and move

scr_move((m_hStickLMovement * m_maxSpeed * m_fireDecrease * m_dashMultiplier * global.upgradeSpeed), (m_vStickLMovement * m_maxSpeed * m_fireDecrease * m_dashMultiplier * global.upgradeSpeed))

/*
if (place_meeting(x + (m_hStickLMovement * m_maxSpeed), y + (m_vStickLMovement * m_maxSpeed), obj_collider))
{
    var horizontalSpeed = m_hStickL * m_maxSpeed;
    for (i = 0; i &lt; abs(horizontalSpeed); i++)
    {
        if (!place_meeting(x + sign(horizontalSpeed), y, obj_collider))
        {
            x += sign(horizontalSpeed);
        } else break;
    };
    
    var verticalSpeed = m_vStickL * m_maxSpeed;
    for (i = 0; i &lt; abs(verticalSpeed); i++)
    {
        if (!place_meeting(x, y + sign(verticalSpeed), obj_collider))
        {
            y += sign(verticalSpeed);
        } else break;
    };  
}
else
{
    x += m_hStickLMovement * m_maxSpeed// * m_moveMultiplier;
    y += m_vStickLMovement * m_maxSpeed// * m_moveMultiplier;
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot

if (m_triggerRight &gt; 0.4 &amp;&amp; m_shootCooldown &lt;= 0)
{
    m_weaponState = 1;
    m_imageShootTimer = 0; 
    switch(m_playerWeapon)
    {
        case weapon_1:       
            var bulletAngle = m_aimDirection + random_range(-5, 5);        
            bullet = instance_create(x, y, obj_bulletNormal);
            bullet.m_Angle = bulletAngle
            bullet.image_angle = bulletAngle   
            bullet.m_glowCollor = m_glowCollor;     
            m_shootCooldown = 6;
            audio_play_sound(snd_shootNormal, 1, 0);
            scr_cameraKnockback(m_aimDirection, 10);
            break;
            
        case weapon_2:
            var bulletAngle = m_aimDirection;
            
            for (i=0; i&lt;5; i++)
            {
                bullet = instance_create(x, y, obj_bulletNormal);
                bullet.m_Angle = bulletAngle + (i * 15) - 30;
                bullet.image_angle = bulletAngle     
            };
                         
            m_shootCooldown = 15;
            audio_play_sound(snd_shootQuintipple, 1, 0);
            scr_cameraKnockback(m_aimDirection, 18);
            break;
            
        case weapon_3:
            var bulletAngle = m_aimDirection + random_range(-1,1);
            bullet = instance_create(x, y, obj_bulletSmall);
            bullet.m_Angle = bulletAngle;
            bullet.image_angle = bulletAngle
            m_shootCooldown = 4; 
            audio_play_sound(snd_shootSmall, 1, 0);
            scr_cameraKnockback(m_aimDirection, 6);
            break;
            
        case weapon_4:
            var bulletAngle = m_aimDirection;
            bullet = instance_create(x, y, obj_bulletShell);
            bullet.m_Angle = bulletAngle;
            bullet.image_angle = bulletAngle
            m_shootCooldown = 50; 
            audio_play_sound(snd_shootShell, 1, 0);
            scr_cameraKnockback(m_aimDirection, 35);
            break;
            
        default:
            m_shootCooldown = 5;
        
    }
}

if (m_shootCooldown &gt; 0) { m_shootCooldown -= 1 * global.upgradeFireRate; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Acitvate abbilities

if (m_triggerLeft &gt; 0.4 &amp;&amp; m_abilityCooldown == 0)
{
    m_abilityAcitve = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do the abilities

if (m_abilityAcitve)
{
    switch (global.playerHead)
    {
        case head_2: 
            m_dashMultiplier = 1.5;
            m_abilityActive = false;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control ability timer

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slow the player down

if (m_triggerRight &gt; 0.4)
{
    m_fireDecrease = lerp(m_fireDecrease, 0.55, 0.1);
}
else
{
    m_fireDecrease = lerp(m_fireDecrease, 1, 0.1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animate

m_imageShootTimer++;

if (m_imageShootTimer == m_imageShootMax)
{
    m_weaponState = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controll abilities

// Dash
m_dashMultiplier = lerp(m_dashMultiplier, 1, 0.1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dei

if (global.playerHealth &lt; 1)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
draw_set_color(c_white);
draw_line_width(m_oldPosX - 1, m_oldPosY - 1, (m_oldPosX - 1) + lengthdir_x(500, m_aimDirection), (m_oldPosY - 1) + lengthdir_y(500, m_aimDirection), 2) 
draw_trail_ext(20,c_white,-1,1,1); 


draw_sprite_ext(m_weaponSprite[m_weaponState], m_imageShootTimer, x, y, image_xscale, image_yscale, m_aimDirection, image_blend, image_alpha);
//draw_sprite_ext(m_glowSprite[m_weaponState], m_imageShootTimer, x, y, image_xscale, image_yscale, m_aimDirection, m_glowCollor, image_alpha);

draw_sprite_ext(m_headSprite, 0, m_oldPosX, m_oldPosY, image_xscale, image_yscale, m_aimDirection, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
